% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exportSpatialization.R
\name{exportSpatialization}
\alias{exportSpatialization}
\title{export a spatialized object either to csv, json or geojson}
\usage{
exportSpatialization(spatialized, path = getwd(), filename = NULL,
  format = "csv")
}
\arguments{
\item{spatialized}{a dataframe containing the gridded predicted values}

\item{path}{a character specifying the path where you want your geosonfile to be stored. Default = working directory}

\item{filename}{a character specifying the name you want to give to the file. If NULL the output is returned as a character. Default = NULL}

\item{format}{a character specifying the type of export format. One of "csv", "json" or "geojson". Default = "csv"}
}
\value{
A 2 elements named list : \code{snitch} & \code{output}. \cr
\code{snitch} is \code{TRUE} if function has provided the expected result. \cr
\code{output} is a named list which contains :
\itemize{
  \item value is a character vector containing the data encoded into the desired exportation format.
  \item condition is a character specifying if the function has encountered success, warning, error.
  \item message is the message relative to the condition.
}
}
\description{
you can both store the encoded string in a variable and in a file by specifying write = TRUE
}
\examples{
\dontrun{
# create the dataset
myDataset = makeDataset(
  dfrom = "2017-03-04T15:00:00Z",
  dto = "2017-03-04T18:00:00Z",
  sensor = "tsa")

# extract the list of hourly sets of records
myDataset = myDataset$output$value

# create the tasks
myTasks = purrr::map(myDataset, makeTask, target = "tsa")

# extract the tasks from the outputs
myTasks = myTasks \%>\% purrr::modify_depth(1, ~.$"output"$"value"$"task")

# keep the first task
myTask = myTasks[[1]]

# create the model
myModel = makeModel(
  task = myTask,
  learner = agrometeorLearners$mulLR_lonLatAlt_NA)

# extract the relevant information
myModel = myModel$output$value

# spatialize using the trained model
mySpatialization = makeSpatialization(
model = myModel$trained,
pred.grid = grid.df) # grid.df comes precompiled with the package

# get the relevant information
mySpatialization = mySpatialization$output$value

# export the spatialized data a json as a character returned into myJson variable
myJson = exportSpatialization(spatialized = mySpatialization$spatialized, format = "json")

# show th json string
myJson$output$value

# show myJson
myJson$output$value

# export as a csv file
exportSpatialization(spatialized = mySpatialization$spatialized, filename = "test", format = "csv")
}

}
\author{
Thomas Goossens
}
